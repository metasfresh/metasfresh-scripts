#!/usr/bin/env groovy
// the "!#/usr/bin... is just to to help IDEs, GitHub diffs, etc properly detect the language and do syntax highlighting for you.
// thx to https://github.com/jenkinsci/pipeline-examples/blob/master/docs/BEST_PRACTICES.md

// note that we set a default version for this library in jenkins, so we don't have to specify it here
@Library('misc')
import de.metas.jenkins.Misc

// thx to http://stackoverflow.com/a/36949007/1012103 with respect to the paramters
properties([
	parameters([
		string(defaultValue: 'INSTANCE.metasfresh.com',
			description: 'Host name of the metasfresh instance to run the tests against',
			name: 'MF_TARGET_HOST'),
		string(defaultValue: 'nexus.metasfresh.com:6001',
			description: 'Registry of the metasfresh-e2e docker image to run. Only used if <code>MF_DOCKER_IMAGE_FULL_NAME</code> is empty;',
			name: 'MF_DOCKER_REGISTRY'),
		string(defaultValue: 'metasfresh/metasfresh-e2e:master_LATEST',
			description: 'Name of the metasfresh-e2e docker image to run. Only used if <code>MF_DOCKER_IMAGE_FULL_NAME</code> is empty; Example: <code>metasfresh/metasfresh-e2e:master_5.86.1_7_master</code>',
			name: 'MF_DOCKER_IMAGE'),
		string(defaultValue: 'metasfresh/metasfresh-e2e:master_LATEST',
			description: '\"Full\" name of the metasfresh-e2e docker image to run. Example: <code>nexus.metasfresh.com:6001/metasfresh/metasfresh-e2e:master_5.86.1_7_master</code>',
			name: 'MF_DOCKER_IMAGE_FULL_NAME'),
		string(defaultValue: 'dev',
			description: 'Username to use when logging in to the target host\'s metasfresh instance',
			name: 'MF_TARGET_USER'),
		password(defaultValue: 'demo1234',
			description: 'Password to use when logging in to the target host\'s metasfresh instance',
			name: 'MF_TARGET_PASSWORD'),
		booleanParam(defaultValue: true,
			description: 'Upload the test results to <a href="https://dashboard.cypress.io">https://dashboard.cypress.io</a>. The secret key is provided by jenkins.',
			name: 'MF_CYPRESS_DASHBOARD'),
		booleanParam(defaultValue: false,
			description: 'Prepend <code>DEBUG=cypress:*</code>; See https://docs.cypress.io/guides/guides/command-line.html#Debugging-commands',
			name: 'MF_CYPRESS_DEBUG'),
		booleanParam(defaultValue: true,
			description: 'Run the cypress tests in chrome as opposed to electron; note that video is only supported with electron; but currently, electron "hangs"',
			name: 'MF_CYPRESS_CHROME'),

		// see https://github.com/metasfresh/metasfresh-scripts/issues/2
		// note: I tried to use https://wiki.jenkins-ci.org/display/JENKINS/Readonly+Parameter+Plugin
		// but the parameter was editable none the less
		// [$class: 'WReadonlyStringParameterDefinition',
		string(
			defaultValue: '',
			description: 'URL of the build this deploy was triggered from (if any).',
			name: 'MF_UPSTREAM_BUILD_URL')//]
	])
	//, buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: "100"))
]);

if(!params.MF_DOCKER_REGISTRY && !params.MF_DOCKER_IMAGE_FULL_NAME)
{
	error 'Missing MF_DOCKER_REGISTRY or MF_DOCKER_IMAGE_FULL_NAME parameter';
}
if(!params.MF_DOCKER_IMAGE && !params.MF_DOCKER_IMAGE_FULL_NAME)
{
	error 'Missing MF_DOCKER_IMAGE or MF_DOCKER_IMAGE_FULL_NAME parameter';
}
if(!params.MF_TARGET_HOST)
{
	error 'Missing MF_TARGET_HOST parameter';
}

final String upstreamBuildURL = params.MF_UPSTREAM_BUILD_URL ?: "(none provided)";

timestamps
{
	final String shortUpstreamJobName
	if(params.MF_UPSTREAM_BUILD_URL)
	{
		// remove the jenkins-job-URL's prefix
		final def reg = ~/^https:\/\/jenkins.metasfresh.com\/job\/metasfresh-e2e\/job\//
		shortUpstreamJobName = params.MF_UPSTREAM_BUILD_URL - reg
	}
	else 
	{
		shortUpstreamJobName = ''
	}
	currentBuild.displayName = "${currentBuild.displayName} RUN ${shortUpstreamJobName} ON ${params.MF_TARGET_HOST}";

	stage("Perform e2e")
	{
		node('agent && linux') // shall only run on a jenkins agent with linux
		{
			withCredentials([string(credentialsId: 'cypress-dashboard-metasfresh-record-key', variable: 'secretCypressRecorcdKey')])
			{
				final String recordKey = params.MF_CYPRESS_DASHBOARD ? secretCypressRecorcdKey : 'NOT_SET'
				final String debugOutput = params.MF_CYPRESS_DEBUG ? 'y' : 'n'
				final String browser = params.MF_CYPRESS_CHROME ? 'chrome' : 'electron'

				// create a local results folder and mount it into the docker container
				// the patch wiwthing the docker container needs to be in sync with reporter-config.json
				sh 'mkdir -p \"$(pwd)\"/testreports'
				final String mount_param='--mount type=bind,source=\"$(pwd)\"/testreports,target=/e2e/cypress/results'
				final String junitFile='testreports/results-junit-*.xml'

				// invoke the nexus REST API to find the docker image's sha256.
				// without this, e.g. in the case of a "master_LATEST" image tag, we won't get the lastest image version
				final String dockerRegistryAndImageAndTag = params.MF_DOCKER_IMAGE_FULL_NAME ?: "${params.MF_DOCKER_REGISTRY}/${params.MF_DOCKER_IMAGE}"

				final def registryRegExp = ~/^[a-zA-Z][a-zA-Z0-9\.]*:[0-9]+\//
				final String dockerImageAndTag = dockerRegistryAndImageAndTag - registryRegExp
				final String dockerImage = dockerImageAndTag.tokenize(':')[0]
				final String dockerTag = dockerImageAndTag.tokenize(':')[1]

				echo "dockerRegistryAndImageAndTag=${dockerRegistryAndImageAndTag}; => dockerImage=${dockerImage}; dockerTag=${dockerTag}"

				final def misc = new de.metas.jenkins.Misc();

				// thx to https://chadmayfield.com/2018/09/01/pulling-artifacts-from-nexus-in-less-than-25-lines-of-bash/
				final String nexusQueryUrl = "https://nexus.metasfresh.com/service/rest/v1/search/assets?docker.imageName=${misc.urlEncode(dockerImage)}&docker.imageTag=${misc.urlEncode(dockerTag)}"
				final String curlCommand = "curl -s -X GET \"${nexusQueryUrl}\" -H \"accept: application/json\" | grep -Po '\"sha256\" *: .*' | awk -F '\"' '{print \$4}'"

				final String dockerImageSha256 = sh label: 'Retrieve docker-image sha256', returnStdout: true, script: curlCommand
				echo "dockerImageSha256=${dockerImageSha256}"

				final String dockerRunCommand = """docker run --rm\\
 -e \"FRONTEND_URL=https://${params.MF_TARGET_HOST}:443\"\\
 -e \"API_URL=https://${params.MF_TARGET_HOST}:443/rest/api\"\\
 -e \"WS_URL=https://${params.MF_TARGET_HOST}:443/stomp\"\\
 -e \"USERNAME=${params.MF_TARGET_USER}\"\\
 -e \"PASSWORD=${params.MF_TARGET_PASSWORD}\"\\
 -e \"RECORD_KEY=${recordKey}\"\\
 -e \"DEBUG_CYPRESS_OUTPUT=${debugOutput}\"\\
 -e \"BROWSER=${browser}\"\\
 ${mount_param} ${dockerRegistryAndImageAndTag}@sha256:${dockerImageSha256}"""

				sh label: 'pull-and-run-image', script: dockerRunCommand

				// collect and archive test results
				junit junitFile

				// cleanup
				cleanWs cleanWhenAborted: false, cleanWhenFailure: false, cleanWhenNotBuilt: false, cleanWhenUnstable: false, notFailBuild: true
			}
		}
	}
}

#!/usr/bin/env groovy
// the "!#/usr/bin... is just to to help IDEs, GitHub diffs, etc properly detect the language and do syntax highlighting for you.
// thx to https://github.com/jenkinsci/pipeline-examples/blob/master/docs/BEST_PRACTICES.md

/**
 * This method will be used further down to call additional jobs such as metasfresh-procurement and metasfresh-webui
 */
def invokeDownStreamJobs(final String jobFolderName,
	final String buildId,
	final String upstreamBranch,
	final String metasfreshVersion,
	final String metasfreshProcurementWebuiVersion,
	final String metasfreshWebuiApiVersion,
	final String metasfreshWebuiFrontendVersion
	)
{
	echo "Invoking downstream job from folder=${jobFolderName} with preferred branch=${upstreamBranch}"

	// if this is not the master branch but a feature branch, we need to find out if the "BRANCH_NAME" job exists or not
	//
	// Here i'm not checking if the build job exists but if the respective branch on github exists. If the branch is there, then I assume that the multibranch plugin also created the job
	def exitCode;
	node('linux')
	{
		// We run this within a node to avoid the error saying:
		// Required context class hudson.FilePath is missing
		// Perhaps you forgot to surround the code with a step that provides this, such as: node
		// ...
		// org.jenkinsci.plugins.workflow.steps.MissingContextVariableException: Required context class hudson.FilePath is missing
		withCredentials([usernameColonPassword(credentialsId: 'github_metas-dev-priv', variable: 'GIT_CREDENTIALS')])
		{
			exitCode = sh returnStatus: true, script: "git ls-remote --exit-code https://${GIT_CREDENTIALS}@github.com/metasfresh/${jobFolderName} ${upstreamBranch}"
		}
	}
	if(exitCode == 0)
	{
		echo "Branch ${upstreamBranch} also exists in ${jobFolderName}"
		jobName = jobFolderName + "/" + upstreamBranch
	}
	else
	{
		echo "Branch ${upstreamBranch} does not exist in ${jobFolderName}; falling back to master"
		jobName = jobFolderName + "/master"
	}

	// I also tried
	// https://jenkins.metasfresh.com/job/metasfresh-multibranch/api/xml?tree=jobs[name]
	// which worked from chrome, also for metas-dev.
	// It worked from the shell using curl (with [ and ] escaped) for user metas-ts and an access token,
	// but did not work from the shell with curl and user metas-dev with "metas-dev is missing the Overall/Read permission"
	// the curl string was sh "curl -XGET 'https://jenkins.metasfresh.com/job/metasfresh-multibranch/api/xml?tree=jobs%5Bname%5D' --user metas-dev:access-token

	// and I also tried inspecting the list returned by
	// Jenkins.instance.getAllItems()
	// but there I got a scurity exception and am not sure if an how I can have a SCM maintained script that is approved by an admin

	build job: jobName,
		parameters: [
			string(name: 'MF_UPSTREAM_BRANCH', value: upstreamBranch),
			string(name: 'MF_UPSTREAM_BUILDNO', value: buildId),
			string(name: 'MF_METASFRESH_VERSION', value: metasfreshVersion),
			string(name: 'MF_METASFRESH_PROCUREMENT_WEBUI_VERSION', value: metasfreshProcurementWebuiVersion),
			string(name: 'MF_METASFRESH_WEBUI_API_VERSION', value: metasfreshWebuiApiVersion),
			string(name: 'MF_METASFRESH_WEBUI_FRONTEND_VERSION', value: metasfreshWebuiFrontendVersion)
		], wait: true
} // invokeDownStreamJobs

properties([
	parameters([
		string(defaultValue: '',
			description: '''If this job is invoked via an updstream build job, then that job can provide either its branch or the respective <code>MF_UPSTREAM_BRANCH</code> that was passed to it.<br>
This build will then attempt to use maven dependencies from that branch, and it will sets its own name to reflect the given value.
<p>
So if this is a "master" build, but it was invoked by a "feature-branch" build then this build will try to get the feature-branch\'s build artifacts annd will set its
<code>currentBuild.displayname</code> and <code>currentBuild.description</code> to make it obvious that the build contains code from the feature branch.''',
			name: 'MF_UPSTREAM_BRANCH'),

		string(defaultValue: '',
			description: 'Version of the metasfresh "main" code we shall use when resolving dependencies. Leave empty and this build will use <code>&lt;effective-branch-name&gt;_LATEST</code>.',
			name: 'MF_METASFRESH_VERSION'),

		string(defaultValue: '',
			description: 'Version of the metasfresh procurement webui code we shall use when resolving dependencies. Leave empty and this build will use t<code>&lt;effective-branch-name&gt;_LATEST</code>.',
			name: 'MF_METASFRESH_PROCUREMENT_WEBUI_VERSION'),

		string(defaultValue: '',
			description: 'Version of the metasfresh-webui(-API) code we shall use when resolving dependencies. Leave empty and this build will use <code>&lt;effective-branch-name&gt;_LATEST</code>.',
			name: 'MF_METASFRESH_WEBUI_API_VERSION'),

		string(defaultValue: '',
			description: 'edi docker image. Leave empty and this build will <code>&lt;effective-branch-name&gt;_LATEST</code>',
			name: 'MF_METASFRESH_EDI_DOCKER_IMAGE'),

		string(defaultValue: '',
			description: 'e2e docker image. Leave empty and this build will <code>&lt;effective-branch-name&gt;_LATEST</code>',
			name: 'MF_METASFRESH_E2E_DOCKER_IMAGE'),
		
		string(defaultValue: '',
			description: 'Project/job folder names to trigger; can be a comma-separated list, but no whitespaces between list items.',
			name: 'MF_PROJECT_NAMES'),

		string(defaultValue: '',
			description: 'Callback URL we can use to signal our caller whether the call failed or succeeded. Thx to the https://plugins.jenkins.io/webhook-step',
			name: 'MF_WEBHOOK_CALLBACK_URL')

		// see https://github.com/metasfresh/metasfresh-scripts/issues/2
		// note: I tried to use https://wiki.jenkins-ci.org/display/JENKINS/Readonly+Parameter+Plugin
		// but the parameter was editable none the less
		// [$class: 'WReadonlyStringParameterDefinition',
		string(
			defaultValue: '',
			description: 'URL of the build this deploy was triggered from (if any).',
			name: 'MF_UPSTREAM_BUILD_URL')//]

	]),
	buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '100')) // keep the last 100 builds
])

timestamps
{
stage("Trigger private multibranch downstream builds")
{
		echo "MF_PROJECT_NAMES=${params.MF_PROJECT_NAMES}";

		final String[] jobNames = params.MF_PROJECT_NAMES.tokenize(',');

		// need to use classic for-loop: https://issues.jenkins-ci.org/browse/JENKINS-34645
		// for (final String jobName: jobNames)
		// https://jenkins.io/doc/pipeline/examples/#jobs-in-parallel
		def jobs = [:]

		String result = 'OK'
		for (int i = 0; i < jobNames.length; i++)
		{
			final jobName = jobNames[i];
			echo "Attempting to invoke job '${jobName}'";
			jobs[jobName] = {
				invokeDownStreamJobs(
					jobName,
					params.MF_UPSTREAM_BUILD_URL,
					params.MF_UPSTREAM_BRANCH,
					params.MF_METASFRESH_VERSION,
					params.MF_METASFRESH_PROCUREMENT_WEBUI_VERSION,
					params.MF_METASFRESH_WEBUI_API_VERSION,
					params.MF_METASFRESH_WEBUI_FRONTEND_VERSION,
					params.MF_METASFRESH_EDI_DOCKER_IMAGE,
					params.MF_METASFRESH_E2E_DOCKER_IMAGE
				);
			}
		} // for

		try
		{
			parallel jobs
		}
		catch(all)
		{
			echo "Caught exception ${all}"
    	result = "One of the private downstream jobs failed";
    }

		if(params.MF_WEBHOOK_CALLBACK_URL)
		{
			node('linux')
			{
				sh "curl -X POST -d '${result}' ${params.MF_WEBHOOK_CALLBACK_URL}"
			}
		}
		else
		{
			echo "No callback URL was given; not attempting to notify upstream"
		}

		if(result != 'OK')
		{
			error result
		}
} // stage
} // timestamps
